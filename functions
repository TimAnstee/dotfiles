#!/bin/bash
#
#

chmox() {
  chmod +x $1
}

# extract any archive format
extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)        tar xjf $1        ;;
      *.tar.gz)         tar xzf $1        ;;
      *.bz2)            bunzip2 $1        ;;
      *.rar)            unrar x $1        ;;
      *.gz)             gunzip $1         ;;
      *.tar)            tar xf $1         ;;
      *.tbz2)           tar xjf $1        ;;
      *.tgz)            tar xzf $1        ;;
      *.zip)            unzip $1          ;;
      *.jar)            unzip $1          ;;
      *.war)            unzip $1          ;;
      *.Z)              uncompress $1     ;;
      *)                echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# A recursive, case-insensitive grep that excludes binary files
dgrep() {
  grep -iR "$@" * | grep -v "Binary"
}

# A recursive, case-insensitive grep that excludes binary files and returns only unique filenames
dfgrep() {
  grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}

psgrep() {
  if [ ! -z $1 ] ; then
    echo "Grepping for processes matching $1..."
    ps aux | grep $1 | grep -v grep
  else
    echo "!! Need name to grep for"
  fi
}

# Kills any process that matches a regexp passed to it
killit() {
  ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs sudo kill
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else # pipe
    python -mjson.tool | pygmentize -l javascript;
  fi;
}

xml() {
  if [ -t 0 ]; then # argument
    xmllint --format - <<< "$*" | pygmentize -l xml;
  else # pipe
    xmllint --format - | pygmentize -l xml;
  fi;
}

html() {
  if [ -t 0 ]; then # argument
    xmllint --html - <<< "$*" | pygmentize -l html;
  else # pipe
    xmllint --html - | pygmentize -l html;
  fi;
}

servethis() {
  open "http://localhost:8000";
  python -c 'import SimpleHTTPServer; SimpleHTTPServer.test()';
}

whoport() {
  lsof -i :$1
}

CURL_FORMAT="
      content_type: %{content_type}
filename_effective: %{filename_effective}
    ftp_entry_path: %{ftp_entry_path}
         http_code: %{http_code}
      http_connect: %{http_connect}
          local_ip: %{local_ip}
        local_port: %{local_port}
      num_connects: %{num_connects}
     num_redirects: %{num_redirects}
      redirect_url: %{redirect_url}
         remote_ip: %{remote_ip}
       remote_port: %{remote_port}
     size_download: %{size_download}
       size_header: %{size_header}
      size_request: %{size_request}
       size_upload: %{size_upload}
    speed_download: %{speed_download}
      speed_upload: %{speed_upload}
 ssl_verify_result: %{ssl_verify_result}
     url_effective: %{url_effective}
   time_namelookup: %{time_namelookup}
      time_connect: %{time_connect}
   time_appconnect: %{time_appconnect}
  time_pretransfer: %{time_pretransfer}
     time_redirect: %{time_redirect}
time_starttransfer: %{time_starttransfer}
                   -------
        time_total: %{time_total}
"

curldiag() {
  curl -v -w "$CURL_FORMAT" -o /dev/null -s $1
}

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###